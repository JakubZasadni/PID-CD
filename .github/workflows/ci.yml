name: Strojenie i walidacja regulator√≥w

on:
  workflow_dispatch:
    inputs:
      regulator:
        description: 'Wybierz regulator do przetestowania'
        required: true
        default: 'regulator_pid'
        type: choice
        options:
          - regulator_pid
          - regulator_pi
          - regulator_dwupolozeniowy

jobs:
  tune:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Strojenie regulator√≥w
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=strojenie \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test

      - name: Upload tuning results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/

  validate_zbiornik:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Walidacja modelu zbiornik_1rz
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=walidacja \
            -e MODEL=zbiornik_1rz \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test || echo "FAIL" > result.txt

      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-zbiornik
          path: wyniki/

  validate_dwa_zbiorniki:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Walidacja modelu dwa_zbiorniki
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=walidacja \
            -e MODEL=dwa_zbiorniki \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test || echo "FAIL" > result.txt

      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-dwa
          path: wyniki/

  validate_wahadlo:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Download tuning results
        uses: actions/download-artifact@v4
        with:
          name: wyniki-tune
          path: wyniki/

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Walidacja modelu wahadlo_odwrocone
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -e TRYB=walidacja \
            -e MODEL=wahadlo_odwrocone \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test || echo "FAIL" > result.txt

      - name: Upload partial results
        uses: actions/upload-artifact@v4
        with:
          name: wyniki-wahadlo
          path: wyniki/

  summary:
    runs-on: ubuntu-latest
    needs: [validate_zbiornik, validate_dwa_zbiorniki, validate_wahadlo]
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t regulator-sim:test -f kontener/Dockerfile .

      - name: Download all validation results
        uses: actions/download-artifact@v4
        with:
          pattern: wyniki-*
          merge-multiple: true
          path: wyniki/

      - name: Move all reports to main wyniki folder
        run: |
          echo "üì¶ Kopiujƒô wyniki z podkatalog√≥w..."
          find wyniki -type f -name "*.json" -exec mv {} wyniki/ \; || true
          find wyniki -type f -name "*.png" -exec mv {} wyniki/ \; || true
          ls -R wyniki

      - name: Generuj raport zbiorczy
        run: |
          docker run --rm \
            -e REGULATOR=${{ github.event.inputs.regulator }} \
            -v ${{ github.workspace }}/wyniki:/app/wyniki \
            regulator-sim:test python src/ocena_metod.py || echo "‚ö†Ô∏è Brak raport√≥w do oceny w katalogu: wyniki"

      - name: Sprawd≈∫ wyniki i zdecyduj o statusie
        run: |
          cd wyniki
          if [ ! -f raport.html ]; then
            echo "‚ö†Ô∏è Brak raportu HTML ‚Äî prawdopodobnie brak wynik√≥w walidacji"
            exit 1
          fi

          PASS_COUNT=$(grep -o "‚úÖ" raport.html | wc -l)
          if [ "$PASS_COUNT" -eq 0 ]; then
            echo "‚ùå ≈ªaden model nie spe≈Çni≈Ç prog√≥w jako≈õci ‚Äî pipeline FAIL"
            exit 1
          else
            echo "‚úÖ Walidacja pozytywna ‚Äî pipeline OK ($PASS_COUNT pozytywnych test√≥w)"
          fi

      - name: Upload raportu ko≈Ñcowego
        uses: actions/upload-artifact@v4
        with:
          name: raport_${{ github.event.inputs.regulator }}
          path: wyniki/

