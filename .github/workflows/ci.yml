name: CI/CD Regulators

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build -t regulator-sim:test .

  tune:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Strojenie regulatorów
        run: |
          docker run --rm -e TRYB=strojenie -v ${{ github.workspace }}/wyniki:/app/wyniki regulator-sim:test

  validate_zbiornik:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - name: Walidacja modelu zbiornik_1rz
        id: zbiornik
        run: |
          docker run --rm -e TRYB=walidacja -e MODEL=zbiornik_1rz -v ${{ github.workspace }}/wyniki:/app/wyniki regulator-sim:test \
          || echo "FAIL" > result.txt
      - name: Zapis wyniku
        run: |
          if [ -f result.txt ]; then echo "fail" >> $GITHUB_ENV; else echo "pass" >> $GITHUB_ENV; fi

  validate_dwa_zbiorniki:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - name: Walidacja modelu dwa_zbiorniki
        id: dwa
        run: |
          docker run --rm -e TRYB=walidacja -e MODEL=dwa_zbiorniki -v ${{ github.workspace }}/wyniki:/app/wyniki regulator-sim:test \
          || echo "FAIL" > result.txt
      - name: Zapis wyniku
        run: |
          if [ -f result.txt ]; then echo "fail" >> $GITHUB_ENV; else echo "pass" >> $GITHUB_ENV; fi

  validate_wahadlo:
    runs-on: ubuntu-latest
    needs: tune
    continue-on-error: true
    steps:
      - name: Walidacja modelu wahadlo_odwrocone
        id: wahadlo
        run: |
          docker run --rm -e TRYB=walidacja -e MODEL=wahadlo_odwrocone -v ${{ github.workspace }}/wyniki:/app/wyniki regulator-sim:test \
          || echo "FAIL" > result.txt
      - name: Zapis wyniku
        run: |
          if [ -f result.txt ]; then echo "fail" >> $GITHUB_ENV; else echo "pass" >> $GITHUB_ENV; fi

  summary:
    runs-on: ubuntu-latest
    needs: [validate_zbiornik, validate_dwa_zbiorniki, validate_wahadlo]
    steps:
      - name: Ocena całościowa
        run: |
          docker run --rm -v ${{ github.workspace }}/wyniki:/app/wyniki regulator-sim:test python3 -m src.ocena_metod
      - name: Sprawdzenie wyników
        run: |
          # Jeśli brak PASS w raportach → FAIL
          if grep -q "❌" wyniki/*raport*.json; then
            echo "Brak spełnionych progów jakości – pipeline FAILED"
            exit 1
          else
            echo "Regulatory przeszły walidację – pipeline OK"
          fi
      - name: Upload raportu
        uses: actions/upload-artifact@v4
        with:
          name: raport-html
          path: wyniki/raport.html
